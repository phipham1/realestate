:toc: macro
toc::[]

= Creating a Release

This page documents how to create and publish a release of OASP4J.

For each release there is a https://github.com/oasp/oasp4j/milestones[milestone] that contains an issue for creating the release itself (what is referred to as +<issue>+).

== Releasing the code
To release the code follow these steps.

* Create a clean clone of the repository:
+
[source,bash]
git clone https://github.com/oasp/oasp4j.git
+
* Ensure your repository is up-to-date:
+
[source,bash]
git pull
+
* Switch (from develop) to the master branch:
+
[source,bash]
git checkout master
+
* Merge the develop branch into master:
+
[source,bash]
git merge develop
+
* Ensure that the result is what you want to release (+mvn clean install+).
* Bump the release version by removing the +-SNAPSHOT+ from +oasp4j.version+ property in top-level +pom.xml+.
* Create an annotated tag for your release:
+
[source,bash]
git tag -a release/x.y.z -m "#<issue>: tagged x.y.z"
+
* Build and deploy the release (you need to have a proper PGP key, and configure your credentials for OSSRH).
+
[source,bash]
mvn clean deploy -P deploy,!all
+
* Open https://oss.sonatype.org/[OSSRH], login and open staging repositories.
* Find your deployment repository as +iooasp-NNNN+ and check its +Content+.
* Then click on +Close+ to close the repository and wait a minute.
* Refresh the repository and copy the URL.
* Create a vote for the release and paste the URL of the staging repository.
* After the vote has passed with success go back to OSSRH and and click on +Release+ to publish the release and stage to maven central.
* Switch back to the +develop+ branch and merge from +master+:
+
[source,bash]
git checkout develop
git merge master
+
* Edit the top-level +pom.xml+ and change +oasp4j.version+ property to the next planned release version including the +-SNAPSHOT+ suffix.
* Commit and push the changes:
+
[source,bash]
git commit -m "#<issue>: open next snapshot version"
git push
+


== Releasing the documentation

* Initially and only once you have to create a local checkout of the github pages and of the wiki repository connected to the oasp-forge wiki:
+
[source,bash]
git clone https://github.com/oasp/oasp.github.io.git
git clone https://github.com/oasp/oasp4j.wiki.git
cd oasp4j.wiki
git remote add forge https://github.com/oasp-forge/oasp4j-wiki.wiki.git
+
* Ensure that in the forge wiki the version is correct on the link:OASP4J[] page.
* Pull from +origin+ as well as from +forge+:
+
[source,bash]
git pull origin
git pull forge
+
* Carefully review all changes that have been done on the forge wiki. Potentially reject changes if necessary.
* When you are complete push your changes:
+
[source,bash]
git push origin
+
* In case you have rejected changes or merged content, you also need to integrate these changes back into the forge wiki.
* Build the documentation PDF as described by https://github.com/oasp/oasp-docgen/wiki#usage[docgen] or fetch it from the automtic jenkins build job (report and pdf located at http://oasp-ci.cloudapp.net/jenkins/job/oasp4j-wiki/ ) which runs after every change of wiki.
* Create a new folder for your version in your checkout of https://github.com/oasp/oasp.github.io/tree/master/oasp4j[oasp.github.io/oasp4j] (as +x.y.z+).
* Copy the just generated +OASP4J.pdf+ into the new release version folder.
* Copy the +index.html+ from the previous release to the new release version folder.
* Edit the new copy of +index.html+ and replace all occurrences of the version to the new release as well as the release date.
* Generate the maven site from the +oasp4j+ release checkout (see xref:releasing-the-core[code release]):
+
[source,bash]
mvn site
mvn site:deploy
+
* Review that the maven site is intact and copy it to the new release version folder (from +oasp4j/target/oasp4j/maven+ to +oasp.github.io/oasp4j/x.y.z/maven+).
* Update the link in the oasp4j/index.html to the latest stable documentation.
* Add, commit and push the new release version folder.
+
[source,bash]
git add x.y.z
git commit -m "oasp/oasp4j#<issue>: released documentation"
git push


== Finalize the Release

* Close the issue of the release.
* Close the milestone of the release (if necessary correct the release date).
* Ensure that the new release is available in maven central.
* Write an announcement for the new release.